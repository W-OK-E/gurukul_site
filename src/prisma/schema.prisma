// prisma/schema.prisma
datasource db { provider = "postgresql"; url = env("DATABASE_URL") }
generator client { provider = "prisma-client-js" }

enum Role {
  PARENT
  STUDENT
  INSTRUCTOR
  ADMIN
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  role         Role     @default(PARENT)
  // Supabase auth user id can be stored in externalId if you want to decouple:
  externalId   String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  parentKids   Kid[]         @relation("ParentKids")
  studentKid   Kid?          @relation("KidStudent", fields: [studentKidId], references: [id])
  studentKidId String?

  instructor   Instructor?   // if this user is an instructor
}

model Kid {
  id           String   @id @default(cuid())
  fullName     String
  grade        String   // "kindergarten", "grade-1", ...
  parent       User     @relation("ParentKids", fields: [parentId], references: [id])
  parentId     String
  // Optional: link a User account for the kid if they log in separately as STUDENT
  studentUser  User?    @relation("KidStudent", references: [id])

  enrollments  Enrollment[]
}

model Instructor {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  bio       String?
  subjects  String[] // ["Math", "Science"]
  kids      Enrollment[]
}

model Course {
  id        String   @id @default(cuid())
  title     String
  subject   String   // "Math", "Science", ...
  gradeTag  String   // "grade-1", "grade-2", etc.
  syllabus  Json?
  enrollments Enrollment[]
  assignments Assignment[]
}

model Enrollment {
  id           String      @id @default(cuid())
  kid          Kid         @relation(fields: [kidId], references: [id])
  kidId        String
  course       Course      @relation(fields: [courseId], references: [id])
  courseId     String
  instructor   Instructor  @relation(fields: [instructorId], references: [id])
  instructorId String
  startDate    DateTime    @default(now())
  status       String      @default("active")

  sessions     ClassSession[]
}

model ClassSession {
  id            String    @id @default(cuid())
  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId  String
  scheduledAt   DateTime
  durationMin   Int
  status        String    @default("scheduled") // scheduled, completed, canceled
  notes         String?
}

model Assignment {
  id           String     @id @default(cuid())
  course       Course     @relation(fields: [courseId], references: [id])
  courseId     String
  title        String
  description  String?
  // store links or Supabase storage keys:
  resources    Json?      // [{type:"file", path:"/assignments/a1.pdf"}]
  dueAt        DateTime?
  createdAt    DateTime   @default(now())

  submissions  Submission[]
}

model Submission {
  id            String      @id @default(cuid())
  assignment    Assignment  @relation(fields: [assignmentId], references: [id])
  assignmentId  String
  kid           Kid         @relation(fields: [kidId], references: [id])
  kidId         String
  submittedAt   DateTime    @default(now())
  links         Json?       // [{url: "..."}]
  files         Json?       // [{path:"/subs/s1.pdf"}]
  grade         String?     // optional evaluation
  feedback      String?
}
